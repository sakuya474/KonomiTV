import{ax as _,d1 as y}from"./index-l7mZcvr7.js";class d{static async fetchTimetable(a,o){const r=await _.get("/timetable",{params:{start_time:a.toISOString(),end_time:o.toISOString()}});return r.type==="error"?(_.showGenericError(r,"番組表の情報を取得できませんでした。"),null):r.data}static async updateEPG(){const a=await _.post("/timetable/update-epg");return a.type==="error"?(_.showGenericError(a,"EPG の取得に失敗しました。"),!1):!0}static async reloadEPG(){const a=await _.post("/timetable/reload-epg");return a.type==="error"?(_.showGenericError(a,"EPG の再読み込みに失敗しました。"),!1):!0}}const f=y("timetable",{state:()=>({_timetable_channels_yesterday:null,_timetable_channels_today:null,_timetable_channels_tomorrow:null,current_date:new Date,selected_channel_type:"GR",selected_day_offset:0,is_loading:!1}),getters:{timetable_channels(e){var i,c,m;const a=e.selected_channel_type==="ALL"?e._timetable_channels_yesterday:(i=e._timetable_channels_yesterday)==null?void 0:i.filter(t=>t.channel.type===e.selected_channel_type),o=e.selected_channel_type==="ALL"?e._timetable_channels_today:(c=e._timetable_channels_today)==null?void 0:c.filter(t=>t.channel.type===e.selected_channel_type),r=e.selected_channel_type==="ALL"?e._timetable_channels_tomorrow:(m=e._timetable_channels_tomorrow)==null?void 0:m.filter(t=>t.channel.type===e.selected_channel_type);if(!a||!o||!r)return null;const s=new Map;return a.forEach(t=>{s.set(t.channel.id,{channel:t.channel,programs:[...t.programs]})}),o.forEach(t=>{const n=s.get(t.channel.id);if(n){const h=new Set(n.programs.map(l=>l.id));t.programs.forEach(l=>{h.has(l.id)||n.programs.push(l)})}else s.set(t.channel.id,{channel:t.channel,programs:[...t.programs]})}),r.forEach(t=>{const n=s.get(t.channel.id);if(n){const h=new Set(n.programs.map(l=>l.id));t.programs.forEach(l=>{h.has(l.id)||n.programs.push(l)})}else s.set(t.channel.id,{channel:t.channel,programs:[...t.programs]})}),s.forEach(t=>{t.programs.sort((n,h)=>new Date(n.start_time).getTime()-new Date(h.start_time).getTime())}),Array.from(s.values())}},actions:{async fetchTimetable(){if(!this.is_loading){this.is_loading=!0;try{const e=new Date(this.current_date);e.setDate(e.getDate()+this.selected_day_offset);const a=new Date(e);a.setDate(a.getDate()-1),a.setHours(0,0,0,0);const o=new Date(a);o.setDate(o.getDate()+1),o.setHours(0,0,0,0);const r=new Date(e);r.setHours(0,0,0,0);const s=new Date(r);s.setDate(s.getDate()+1),s.setHours(0,0,0,0);const i=new Date(e);i.setDate(i.getDate()+1),i.setHours(0,0,0,0);const c=new Date(i);c.setDate(c.getDate()+1),c.setHours(0,0,0,0);const[m,t,n]=await Promise.all([d.fetchTimetable(a,o),d.fetchTimetable(r,s),d.fetchTimetable(i,c)]);this._timetable_channels_yesterday=m,this._timetable_channels_today=t,this._timetable_channels_tomorrow=n}catch(e){console.error("番組表の取得に失敗しました:",e),this._timetable_channels_yesterday=null,this._timetable_channels_today=null,this._timetable_channels_tomorrow=null}finally{this.is_loading=!1}}},setChannelType(e){this.selected_channel_type=e},async updateEPG(){if(!this.is_loading){this.is_loading=!0;try{if(!await d.updateEPG())throw new Error("EPGの取得に失敗しました。");await this.fetchTimetable()}catch(e){throw console.error("EPG 取得エラー:",e),e}finally{this.is_loading=!1}}},async reloadEPG(){if(!this.is_loading){this.is_loading=!0;try{if(!await d.reloadEPG())throw new Error("EPGの再読み込みに失敗しました。");await this.fetchTimetable()}catch(e){throw console.error("EPG再読み込みエラー:",e),e}finally{this.is_loading=!1}}}}});export{f as u};
